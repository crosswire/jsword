<project name="core" default="all" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--=======================================================================
	== To make eclipse recognise this file as an ant file, go to preferences,
	== ant and add core.xml to the "Names" field, and then under Workbench,
	== "File Associations" add a type "core.xml" with ant as the editor.
	=========================================================================-->

	<!--=======================================================================
	== These are the standard locations that this build file uses.
	== This assumes that the build file is in the root of the project.
	=========================================================================-->
	<property name="release.version"		value="2.0.1-luceneupgrade-alpha" />

	<tstamp><format property="today" pattern="-yyyyMMdd"/></tstamp>
	<property name="name.versioned" value="${ant.project.name}-${release.version}"/>
	<property name="name.timestamped" value="${name.versioned}${today}"/>

	<dirname property="core.basedir"		file="${ant.file.core}" />
	<property name="jsword.home"			location="${core.basedir}" />
	<!-- lib.dir is the home to 3-rd party jars both for buildtime and runtime.
	  == It is also the location to which built jars are put.
	  -->
	<property name="lib.dir"				location="${jsword.home}/lib/jars" />
	<!-- Tools home is where 3-rd party QA tools are downloaded -->
	<property name="tools.home"				location="${jsword.home}/tools" />
	<!-- Location of supplemental files useful for the build. -->
	<property name="etc.dir"				value="etc" />
	<!-- Shared location of supplemental files useful for the build. -->
	<property name="etc.shared.dir"			value="${jsword.home}/etc" />

	<!-- Properties regarding the location of source files -->
	<property name="src.dir"				value="src" />
	<property name="src.main.java.dir"		value="${src.dir}/main/java" />
	<property name="src.main.res.dir"		value="${src.dir}/main/resources" />
	<property name="src.main.web.dir"		value="${src.dir}/main/webapp"/>
	<property name="src.test.java.dir"		value="${src.dir}/test/java" />
	<property name="src.test.res.dir"		value="${src.dir}/test/resources" />

	<available file="${src.main.java.dir}"	type="dir"	property="src.main.java.present"/>
	<available file="${src.main.res.dir}"	type="dir"	property="src.main.res.present"/>
	<available file="${src.main.web.dir}"	type="dir"	property="src.main.web.present"/>
	<available file="${src.test.java.dir}"	type="dir"	property="src.test.java.present"/>
	<available file="${src.test.res.dir}"	type="dir"	property="src.test.res.present"/>

	<!-- Properties releated to the install destination. -->
	<property name="dest.dir"				value="target" />
	<property name="dest.main.classes.dir"	value="${dest.dir}/main/classes" />
	<property name="dest.test.classes.dir"	value="${dest.dir}/test/classes" />
	<property name="dest.install.pkg.dir"	value="${jsword.home}/${dest.dir}/${ant.project.name}" />
	<property name="dest.install.web.dir"	value="${jsword.home}/${dest.dir}/${ant.project.name}" />
	<property name="report.dir"				value="${jsword.home}/${dest.dir}/${ant.project.name}" />

	<!-- override -->
	<property name="keystore.devfile"		location="${jsword.home}/crosswire.keystore" />
	<property name="keystore.file"			location="${keystore.devfile}" />
	<property name="keystore.alias"			value="jsword" />
	<property name="keystore.pswd"			value="p455w0rd" />

	<property name="verbose.copy"			value="false" />

	<!--=======================================================================
	== These jars are built by the various JSword projects.
	== It excludes jsword-common-aqua which is treated as an external jar.
	=========================================================================-->
	<patternset	id="internal.built.jars">
		<include	name="**/bibledesktop-${release.version}.jar" />
		<include	name="**/jsword-${release.version}.jar" />
	</patternset>

	<!--=======================================================================
	== This is a pattern and path to all of the jars
	== to be used at run time
	=========================================================================-->
	<patternset	id="patternset.runtime">
		<exclude name="**/junit*.jar" />
		<include name="**/*.jar" />
	</patternset>
	<path id="classpath.runtime">
		<fileset dir="${lib.dir}">
			<patternset refid="patternset.runtime"/>
		</fileset>
	</path>

	<!--=======================================================================
	== This is a pattern and path to all of the jars
	== to be used at build time
	=========================================================================-->
	<patternset	id="patternset.buildtime">
		<include name="*.jar" />
	</patternset>
	<path id="classpath.buildtime">
		<fileset dir="${lib.dir}">
			<patternset refid="patternset.buildtime"/>
		</fileset>
	</path>

	<!--=======================================================================
	== This is a path to all of the jars and test classes
	== to be used at test time
	=========================================================================-->
	<path id="classpath.test">
	    <pathelement location="${dest.main.classes.dir}" />
	    <path refid="classpath.buildtime" />
	</path>

	<!--=======================================================================
	== This is a path to all non-test source directories.
	== These are the ones without "test" in their names.
	=========================================================================-->
	<patternset id="java.compile">
		<include name="**/*.java" />
	</patternset>
	<path id="source.path">
		<dirset dir="${src.main.java.dir}"  includes="*" />
	</path>

	<!--=======================================================================
	== This is a path to all test source directories.
	== These are the ones with "test" in their names.
	=========================================================================-->
	<path id="testsource.path">
		<dirset dir="${src.test.java.dir}"  includes="*" />
	</path>

	<!--=======================================================================
	== These are the non-java resource files
	== that may appear along side of java files.
	=========================================================================-->
	<patternset id="java.non.compile">
		<include name="**/*" />
		<exclude name="**/*.html" />
		<exclude name="**/*.java" />
		<exclude name="**/*.class" />
	</patternset>

	<!--=======================================================================
	== These are local copies of DTDs used by ant xslt/style.
	== This is necessary to prevent HTTPD 503 responses
	== and it is useful to speed up the build.
	=========================================================================-->
	<xmlcatalog id="commonDTDs">
		<dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN"	   location="${jsword.home}/etc/dtdcatalog/xhtml1-strict.dtd" />
		<dtd publicId="-//W3C//DTD XHTML 1.0 Transitional//EN" location="${jsword.home}/etc/dtdcatalog/xhtml1-transitional.dtd" />
	</xmlcatalog>

	<!--=======================================================================
	== Mark this build with the current timestamp
	=========================================================================-->
	<target	name="init"
			description="Prepare for other tasks">
		<echo message="Initializing ${ant.project.name}" />
		<tstamp />
	</target>

	<!--=======================================================================
	== Clean the intermediate files and build everything, test it and
	== then install it.
	=========================================================================-->
	<target	name="all"
			description="Run a full clean/build/test/install cycle"
			depends="clean, incremental">
	</target>

	<!--=======================================================================
	== Clean the intermediate files.
	== Also invoke a clean on any dependencies, if any.
	=========================================================================-->
	<target	name="clean"
			description="Remove the target directory"
			depends="init, clean.dependency">
		<delete dir="${lib.dir}"/>
		<delete dir="${dest.dir}" />
		<antcall target="clean.extra"/>
	</target>

	<target	name="clean.extra"
			description="Remove project specific files and directories"/>

	<!--=======================================================================
	== Invoke a clean on any dependencies, if any.
	== This target requires the "dependency" property to be set by
	== the importing ant build file.
	=========================================================================-->
	<target	name="clean.dependency"
			description="Clean the dependencies"
			if="dependency">
		<echo message="Clean project dependency first: ${dependency}." />
		<ant dir="../${dependency}"
			 target="clean"
			 inheritAll="false" />
	</target>

	<!--=======================================================================
	== Build everything that has changed, test it and then install the changes.
	=========================================================================-->
	<target	name="incremental"
			depends="incremental.dependency, prepare, build, test, tools, install"
			description="Run a build/test/install cycle">
	</target>

	<!--=======================================================================
	== Invoke a build on any dependencies, if any.
	== This target requires the "dependency" property to be set by
	== the importing ant build file.
	=========================================================================-->
	<target	name="incremental.dependency"
			description="Build the dependencies"
			if="dependency">
		<echo message="Build project dependency first: ${dependency}." />
		<ant	dir="../${dependency}"
				target="incremental"
				inheritAll="false" />
	</target>

	<!--=======================================================================
	== Copy all the local and external 3rd party jars to a single locaton.
	== Also copy the resources to the appropriate classes dir.
	=========================================================================-->
	<target	name="prepare"
			description="Prepare for the build."
			depends="resource.main, resource.test">
	</target>

	<!--=======================================================================
	== Build all the non-test java files into class files and
	== create a jar file for the project with the name project.jar,
	== where project is replaced with the name of the project.
	== This jar is built to the lib.dir directory.
	== But first invoke a build on any dependencies, if any.
	==
	== Also build all test java files into class files in their own directory.
	=========================================================================-->
	<target	name="build"
			description="Run a full build"
			depends="compile">
		<jar jarfile="${lib.dir}/${name.versioned}.jar">
			<fileset dir="${dest.main.classes.dir}" />
		</jar>
	</target>

	<!--=======================================================================
	== Compile all the java files under source.path into class files.
	== Make sure that all the resources in those directories make it over too.
	=========================================================================-->
	<target	name="compile"
			description="Compile main and test source"
			depends="prepare, compile.main, compile.test" />

	<!-- Compile the main source -->
	<target	name="compile.main"
			depends="prepare"
			if="src.main.java.present">
		<mkdir dir="${dest.main.classes.dir}" />
		<!--		<echo>"$${ant.refid:classpath.runtime}=${ant.refid:classpath.runtime}"</echo> -->
		<javac	debug="on"
				includes="**/*.java"
				excludes="**/package-info.java"
				srcdir="${src.main.java.dir}"
				destdir="${dest.main.classes.dir}"
				encoding="utf-8"
				includeantruntime="false"
				target="1.5"
			    source="1.5">
			<classpath refid="classpath.buildtime" />
		</javac>
	</target>

	<!-- Copy the main resources -->
	<target name="resource.main"
			if="src.main.res.present">
		<!-- Copy the resources to the classes directory. -->
		<mkdir dir="${dest.main.classes.dir}" />
		<copy	verbose="${verbose.copy}"
				todir="${dest.main.classes.dir}"
				includeEmptyDirs="false"
				flatten="false"
				failonerror="false"
				preservelastmodified="true">
			<fileset dir="${src.main.res.dir}" includes="**" />
		</copy>
	</target>

	<!--=======================================================================
	== Compile all the test java files under testsource.path into class files.
	== Make sure that all the resources in those directories make it over too.
	== At this time a project-test.jar is not being created.
	==
	== This depends upon build having been completed, but we don't have the
	== depends="build" here as an optimization.
	=========================================================================-->
	<target	name="compile.test"
			depends="resource.test"
			if="src.test.java.present">
		<mkdir dir="${dest.test.classes.dir}" />
		<javac	debug="on"
				includes="**/*.java"
				srcdir="${src.test.java.dir}"
				destdir="${dest.test.classes.dir}"
				encoding="utf-8"
				includeantruntime="false"
				target="1.5"
		        source="1.5">
			<classpath refid="classpath.test" />
		</javac>
	</target>

	<!-- Copy the resources to the classes directory. -->
	<target name="resource.test"
			if="src.test.res.present">
		<mkdir dir="${dest.test.classes.dir}" />
		<copy	verbose="${verbose.copy}"
				todir="${dest.test.classes.dir}"
				includeEmptyDirs="false"
				flatten="false"
				failonerror="false"
				preservelastmodified="true">
			<fileset dir="${src.test.res.dir}" includes="**" />
		</copy>
	</target>

	<!--=======================================================================
	== Install the built artifacts.
	== By overriding this target in the importing ant build file,
	== it will allow for the definition of any other needed work.
	=========================================================================-->
	<target	name="install"
			description="Install all the files"
		    depends="package">
		<!-- Create a flag file used to determine whether this task finished successfully -->
		<mkdir dir="${dest.install.pkg.dir}"/>
		<antcall target="install.extra"/>
		<touch file="${dest.install.pkg.dir}/.flagfile"/>
	</target>

	<target	name="install.extra"
			description="Do extra project installation"/>

	<target	name="package"
			description="Create basic project packaging"
			depends="package.src, package.doc, package.bin">
		<antcall target="package.extra"/>
	</target>

	<target	name="package.extra"
			description="Create extra project packaging"/>

	<!--=======================================================================-->
	<!-- source packages -->
	<target	name="package.src"
			if="src.main.java.present">
		<mkdir dir="${dest.install.pkg.dir}"/>
		<zip destfile="${dest.install.pkg.dir}/${name.timestamped}-src.zip">
			<zipfileset prefix="${name.versioned}" dir="${src.main.java.dir}"/>
			<zipfileset prefix="${name.versioned}" dir="${src.main.res.dir}"/>
		</zip>
	</target>

	<!-- doc packages -->
	<target	name="package.doc"
			depends="javadoc"
			if="src.main.java.present">
		<mkdir dir="${dest.install.pkg.dir}"/>
		<zip destfile="${dest.install.pkg.dir}/${name.timestamped}-doc.zip">
			<zipfileset prefix="${name.versioned}" dir="${javadoc.report}"/>
		</zip>
	</target>

	<!-- binary packages -->
	<target	name="package.bin"
			depends="build"
			if="src.main.java.present">
		<mkdir dir="${dest.install.pkg.dir}"/>
		<zip destfile="${dest.install.pkg.dir}/${name.timestamped}-bin.zip">
			<zipfileset prefix="${name.versioned}" dir="${lib.dir}" includes="${name.versioned}.jar"/>
		</zip>
	</target>

	<property name="javadoc.report"			location="${report.dir}/javadoc" />
	<target	name="javadoc"
			description="Create JavaDoc"
			if="src.main.java.present">
		<!-- This is not incremental. Empty it so it can remove unused docs. -->
		<delete dir="${javadoc.report}"/>
		<mkdir dir="${javadoc.report}"/>
		<javadoc
				sourcepath="${src.main.java.dir}"
				classpathref="classpath.runtime"
				stylesheetfile="${etc.shared.dir}/javadoc/stylesheet.css"
				destdir="${javadoc.report}"
				overview="../jsword/src/main/java/overview.html"
				private="true"
				author="true"
				use="true"
				splitindex="true"
				version="true"
				source="1.5"
				failonerror="false">
			<footer>Copyright &#168; 2003-2013</footer>
			<link	offline="true"
					href="http://download.oracle.com/javase/1.5.0/docs/api/"
					packagelistLoc="${etc.shared.dir}/javadoc"/>
		</javadoc>
	</target>

	<!--=======================================================================
	== Use ivy to manage external jars.
	== These are properties related to ivy.
	=========================================================================-->
	<property name="ivy.version"			value="2.3.0" />
	<property name="ivy.home"				location="${tools.home}/ivy" />
	<property name="ivy.url"				value="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar" />
	<property name="ivy.jar.file"			location="${ivy.home}/ivy-${ivy.version}.jar" />
	<property name="ivy.quiet"				value="default" /> <!-- default or quiet -->
	<property name="ivy.sync"				value="false" /> <!-- true or false -->
	<property name="ivy.project.dir"		location="${jsword.home}"/>
	<property name="ivy.lib.dir"			location="${ivy.project.dir}/lib"/>
	<property name="ivy.dep.file"			location="${ivy.project.dir}/ivy.xml" />
	<property name="ivy.default.ivy.user.dir"	location="${ivy.project.dir}/ivy" />

	<!-- Ivy.sync controls whether only the current version of jar is allowed.
	  == This is good when updating the project, but not from day-to-day
	  == since we build extra stuff into the same location. Having sync="true"
	  == causes that to be deleted and need to be restored.
	-->
	<target	name="ivy"
			description="Retrieve dependencies with ivy"
			depends="ivy.task">
		<ivy:retrieve sync="${ivy.sync}" pattern="${ivy.lib.dir}/[type]s/[artifact]-[revision].[ext]" log="${ivy.quiet}" />
		<ivy:cachepath pathid="default.path" />
	</target>

	<target	name="ivy.clean"
			description="Remove the ivy installation">
		<delete dir="${ivy.home}" />
	</target>

	<target	name="ivy.clean-cache"
			description="Remove dependent jars that ivy manages"
			depends="ivy.task">
		<ivy:cleancache />
	</target>

	<!-- Make ivy visible to Ant -->
	<target	name="ivy.task"
			depends="ivy.download">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.home}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<!-- Download ivy -->
	<target	name="ivy.download"
			depends="ivy.check"
			unless="ivy.present">
		<mkdir dir="${ivy.home}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="${ivy.url}" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<!-- See if Ivy is installed -->
	<target	name="ivy.check">
		<available file="${ivy.jar.file}"		type="file" property="ivy.present" />
	</target>

	<!--=======================================================================
	== External 3-rd Party Tools
	=========================================================================-->
	<target	name="tools"
			description="Run QA reports"
			depends="javancss, checkstyle, findbugs, pmd, cpd, jdepend, java2html"
			if="src.main.java.present"/>

	<!--=======================================================================
	== Use Checkstyle to check the style of JSword files
	== These are properties related to checkstyle.
	=========================================================================-->
	<property name="checkstyle.version"		value="5.7" />
	<property name="checkstyle.home"		location="${tools.home}/checkstyle-${checkstyle.version}" />
	<property name="checkstyle.report"		location="${report.dir}/checkstyle" />
	<property name="checkstyle.url"			value="http://sourceforge.net/projects/checkstyle/files/checkstyle/${checkstyle.version}/checkstyle-${checkstyle.version}-bin.zip" />
	<property name="checkstyle.zip"			location="${tools.home}/checkstyle-${checkstyle.version}.zip" />
	<property name="checkstyle.jar.file"	location="${checkstyle.home}/checkstyle-${checkstyle.version}-all.jar" />
	<property name="checkstyle.fail"		value="false" />
	<property name="checkstyle.config"		location="${jsword.home}/JSword.checkstyle.xml" />

	<target	name="checkstyle"
			description="Build Checkstyle report"
			depends="checkstyle.task">
		<mkdir	dir="${checkstyle.report}"/>
		<checkstyle
				config="${checkstyle.config}"
				failOnViolation="${checkstyle.fail}">
			<property key="checkstyle.basedir" file="${src.main.java.dir}"/>
			<property key="checkstyle.cache.file" file="${checkstyle.report}/checkstyle.cache.dat"/>
			<fileset dir="${src.main.java.dir}" includes="**/*.java" />
			<formatter type="plain"/>
			<formatter type="xml" toFile="${checkstyle.report}/checkstyle_errors.xml"/>
		</checkstyle>
		<xslt	in="${checkstyle.report}/checkstyle_errors.xml"
				out="${checkstyle.report}/index.html"
				style="${checkstyle.home}/contrib/checkstyle-simple.xsl">
			<xmlcatalog refid="commonDTDs"/>
		</xslt>
	</target>

	<!-- Make checkstyle visible to Ant -->
	<target	name="checkstyle.task"
			depends="checkstyle.download">
		<taskdef resource="checkstyletask.properties" classpath="${checkstyle.jar.file}" />
	</target>

	<!-- Download checkstyle -->
	<target	name="checkstyle.download"
			depends="checkstyle.check"
			unless="checkstyle.present">
		<mkdir	dir="${tools.home}" />
		<get	src="${checkstyle.url}" dest="${checkstyle.zip}" usetimestamp="true" />
		<unzip	src="${checkstyle.zip}" dest="${tools.home}" />
		<delete	file="${checkstyle.zip}" />
	</target>

	<!-- See if checkstyle is installed -->
	<target	name="checkstyle.check">
		<available file="${checkstyle.home}"	type="dir"  property="checkstyle.present" />
	</target>

	<!--=======================================================================
	== Use findbugs to find bugs.
	== These are properties related to findbugs.
	=========================================================================-->
	<property name="findbugs.version"		value="2.0.3" />
	<property name="findbugs.home"			location="${tools.home}/findbugs-${findbugs.version}" />
	<property name="findbugs.report"		location="${report.dir}/findbugs" />
	<property name="findbugs.url"			value="http://prdownloads.sourceforge.net/findbugs/findbugs-${findbugs.version}.zip?download" />
	<property name="findbugs.zip"			location="${tools.home}/findbugs-${findbugs.version}.zip" />

	<target	name="findbugs"
			description="Build Findbugs report"
			depends="build, findbugs.task">
		<mkdir	dir="${findbugs.report}" />
		<findbugs
				home="${findbugs.home}"
				projectName="$ant.project.name"
				output="html"
				outputFile="${findbugs.report}/index.html"
				reportLevel="low"
				workHard="true"
				jvmargs="-Xmx512m">
			<auxClasspath refid="classpath.runtime"/>
			<sourcePath path="${src.main.java.dir}"/>
			<class location="${dest.main.classes.dir}" />
		</findbugs>
	</target>

	<!-- Make findbugs visible to Ant -->
	<target	name="findbugs.task"
			depends="findbugs.download">
		<path id="findbugs.lib.path">
			<fileset dir="${findbugs.home}" includes="**/*.jar" />
		</path>
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.lib.path" />
	</target>

	<!-- Download findbugs -->
	<target	name="findbugs.download"
			depends="findbugs.check"
			unless="findbugs.present">
		<mkdir	dir="${tools.home}" />
		<get	src="${findbugs.url}" dest="${findbugs.zip}" usetimestamp="true" />
		<unzip	src="${findbugs.zip}" dest="${tools.home}" />
		<delete	file="${findbugs.zip}" />
	</target>

	<!-- See if findbugs is installed -->
	<target	name="findbugs.check">
		<available file="${findbugs.home}"		type="dir"  property="findbugs.present" />
	</target>

	<!--=======================================================================
	== Use PMD and CPD to find bad code
	== These are properties related to PMD.
	=========================================================================-->
	<property name="pmd.version"			value="5.1.0" />
	<property name="pmd.home"				location="${tools.home}/pmd-bin-${pmd.version}" />
	<property name="pmd.report"				location="${report.dir}/pmd" />
	<property name="cpd.report"				location="${report.dir}/cpd" />
	<property name="pmd.url"				value="http://sourceforge.net/projects/pmd/files/pmd/${pmd.version}/pmd-bin-${pmd.version}.zip/download" />
	<property name="pmd.zip"				location="${tools.home}/pmd-bin-${pmd.version}.zip" />

	<target	name="pmd"
			description="Build PMD report"
			depends="pmd.task">
		<mkdir	dir="${pmd.report}"/>

		<pmd	rulesetfiles="${jsword.home}/JSword.pmd.ruleset.xml"
				shortFilenames="true">
			<formatter type="xml" toFile="${pmd.report}/report_pmd.xml"/>
			<fileset dir="${src.main.java.dir}" includes="**/*.java"/>
		</pmd>
		<xslt	in="${pmd.report}/report_pmd.xml"
				style="${pmd.home}/etc/xslt/pmd-report-per-class.xslt"
				out="${pmd.report}/index.html">
			<xmlcatalog refid="commonDTDs"/>
		</xslt>
		<copy	file="${pmd.home}/etc/xslt/sorttable.js" overwrite="true"
				tofile="${pmd.report}/sorttable.js"/>
	</target>

	<!-- Make PMD visible to Ant -->
	<target	name="pmd.task"
			depends="pmd.download">
		<path id="pmd.lib.path">
			<pathelement location="${pmd.home}" />
			<fileset dir="${pmd.home}" includes="*/*.jar" />
		</path>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.lib.path" />
	</target>

	<target	name="cpd"
			description="Build CPD report"
			depends="cpd.task">
		<mkdir	dir="${cpd.report}" />
		<cpd	minimumTokenCount="100"
				format="xml"
				outputFile="${cpd.report}/report_cpd.xml">
			<fileset dir="${src.main.java.dir}" includes="**/*.java"/>
		</cpd>
		<xslt	in="${cpd.report}/report_cpd.xml"
				style="${pmd.home}/etc/xslt/cpdhtml.xslt"
				out="${cpd.report}/index.html">
			<xmlcatalog refid="commonDTDs" />
		</xslt>
	</target>

	<!-- Make CPD visible to Ant -->
	<target	name="cpd.task"
			depends="pmd.download">
		<path id="pmd.lib.path">
			<fileset dir="${pmd.home}" includes="*/*.jar" />
		</path>
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.lib.path" />
	</target>

	<!-- Download PMD -->
	<target	name="pmd.download"
			depends="pmd.check"
			unless="pmd.present">
		<mkdir	dir="${tools.home}" />
		<get	src="${pmd.url}" dest="${pmd.zip}" usetimestamp="true" />
		<unzip	src="${pmd.zip}" dest="${tools.home}" />
		<delete	file="${pmd.zip}" />
	</target>

	<!-- See if PMD/CPD is installed -->
	<target	name="pmd.check">
		<available file="${pmd.home}"			type="dir"  property="pmd.present" />
	</target>

	<!--=======================================================================
	== Use Cobertura to do code coverage analysis.
	== Cobertura is a fork of JCoverage.
	== These are properties and tasks related to Cobertura.
	=========================================================================-->
	<property name="cobertura.version"		value="2.0.3" />
	<property name="cobertura.home"			location="${tools.home}/cobertura-${cobertura.version}" />
	<property name="cobertura.report"		location="${report.dir}/cobertura" />
	<property name="cobertura.url"			value="http://sourceforge.net/projects/cobertura/files/cobertura/${cobertura.version}/cobertura-${cobertura.version}-bin.zip/download" />
	<property name="cobertura.zip"			location="${tools.home}/cobertura-${cobertura.version}.zip" />
	<property name="cobertura.instrument.dir"	value="${cobertura.report}/tmp" />
	<property name="cobertura.datafile"		value="${cobertura.instrument.dir}/cobertura.ser" />
	<property name="junit.report"			location="${report.dir}/junit" />

	<target	name="test"
			description="Run a full test build"
			depends="cobertura.instrument"
		    if="src.test.java.present">
		<delete dir="${junit.report}"/>
		<mkdir dir="${junit.report}"/>
		<junit	printsummary="on"
	    		showoutput="off"
	    	    fork="yes"
	    	    forkmode="once"
	    	    maxmemory="512m"
	    	    failureproperty="junit.failure">
			<sysproperty
					key="net.sourceforge.cobertura.datafile"
					file="${cobertura.datafile}" />
			<classpath location="${cobertura.instrument.dir}"/>
			<classpath>
				<path refid="classpath.test"/>
			    <pathelement location="${dest.test.classes.dir}" />
			</classpath>
			<classpath refid="cobertura.classpath" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.report}">
				<fileset dir="${dest.test.classes.dir}">
					<include name="**/*Test*.class"/>
					<exclude name="**/*AllTests*"/>
					<exclude name="**/*$$*"/>
					<exclude name="**/*Speed*"/>
				</fileset>
			</batchtest>
		</junit>
		<!-- There's an exploitable security bug since Oracle Java 6 u23
		== Oracle keeps deleting/hiding bug reports regarding it. Basically,
		== any xslt that uses Java's xslt engine and calls a static Java
		== function fails. If xerces/xalan are provided then it will work.
		== I couldn't figure out how to provide xerces/xalan.
		<junitreport todir="${junit.report}">
		  <fileset dir="${junit.report}">
		    <include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${junit.report}/html"/>
		</junitreport>
		-->
		<cobertura-report
				datafile="${cobertura.datafile}"
				format="html"
				destdir="${cobertura.report}"
				srcdir="${src.main.java.dir}" />
		<!--
		== Check how well coverage is. All parameters shown with default being 50.
		== But don't fail for now.
		<cobertura-check
				datafile="${cobertura.datafile}"
				linerate="50"
				branchrate="50"
				packagelinerate="50"
				packagebranchrate="50"
				totallinerate="50"
				totalbranchrate="50"
				haltonfailure="false"
				failureproperty="coverage.failure"/>
		<fail message="Tests failed: check test reports." if="junit.failure" />
		-->
	</target>

	<!-- Instrument classes for Cobertura -->
	<target	name="cobertura.instrument"
			depends="build, cobertura.task"
			if="src.main.java.present">
		<delete file="${cobertura.datafile}" />
		<cobertura-instrument
				datafile="${cobertura.datafile}"
				todir="${cobertura.instrument.dir}">
			<fileset dir="${dest.main.classes.dir}">
				<include name="**/*.class" />
			</fileset>
			<auxClasspath>
			  <path refid="classpath.runtime" />
			</auxClasspath>
		</cobertura-instrument>
	</target>

	<!-- Make Cobertura visible to Ant-->
	<target	name="cobertura.task"
			depends="cobertura.download">
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.home}">
				<include name="cobertura-${cobertura.version}.jar" />
				<include name="lib/**/*.jar" />
			</fileset>
		</path>

		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	</target>

	<!-- See if Cobertura is installed -->
	<target	name="cobertura.download"
			depends="cobertura.check"
			unless="cobertura.present">
		<mkdir	dir="${tools.home}" />
		<get	src="${cobertura.url}" dest="${cobertura.zip}" usetimestamp="true" />
		<unzip	src="${cobertura.zip}" dest="${tools.home}" />
		<delete	file="${cobertura.zip}" />
	</target>

	<!-- See if Cobertura is installed -->
	<target	name="cobertura.check">
		<available file="${cobertura.home}"		type="dir"  property="cobertura.present" />
	</target>

	<!--=======================================================================
	== Use Java2html to create Javadoc style navigation of code.
	== These are properties related to java2html.
	== Note: this may be redundant with the output of Cobertura.
	=========================================================================-->
	<property name="java2html.version"		value="1.5.1" />
	<property name="java2html.home"			location="${tools.home}/java2html-${java2html.version}" />
	<property name="java2html.report"		location="${report.dir}/java2html" />
	<property name="java2html.url"			value="http://www.java2html.com/Java2HTML.zip"/>
	<property name="java2html.zip"			location="${tools.home}/Java2HTML.zip"/>

	<target	name="java2html"
			description="HTML versions of the java code"
			depends="java2html.task">
		<mkdir dir="${java2html.report}"/>
		<java2html title="JSword Source" 
				simple="no"
				tabsize="4"
				marginsize="4"
				header="true"
				footer="false"
				destination="${java2html.report}">
			<fileset dir="${src.main.java.dir}" includes="**/*.java" />
			<javadoc localRef="${etc.shared.dir}/javadoc" httpRef="http://download.oracle.com/javase/1.5.0/docs/api/"/>
		</java2html>    
	</target>

	<!-- Make Java2HTML visible to Ant-->
	<target name="java2html.task"
			depends="java2html.download">
		<path id="java2html.classpath">
			<fileset dir="${java2html.home}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<taskdef name="java2html" classpathref="java2html.classpath" classname="com.java2html.Java2HTMLTask"/>
	</target>

	<!-- Download Java2HTML -->
	<target	name="java2html.download"
			depends="java2html.check"
			unless="java2html.present">
		<mkdir	dir="${java2html.home}" />
		<get	src="${java2html.url}"	dest="${java2html.zip}"	usetimestamp="true" />
		<unzip	src="${java2html.zip}"	dest="${java2html.home}" />
		<delete	file="${java2html.zip}" />
	</target>

	<!-- See if Java2HTML is installed -->
	<target	name="java2html.check">
		<available file="${java2html.home}"		type="dir"  property="java2html.present" />
	</target>

	<!--=======================================================================
	== Use JDepend to do dependency analysis.
	== These are properties related to JDepend.
	=========================================================================-->
	<property name="jdepend.version"		value="2.9.1" />
	<property name="jdepend.home"			location="${tools.home}/jdepend-${jdepend.version}" />
	<property name="jdepend.report"			location="${report.dir}/jdepend" />
	<property name="jdepend.url"			value="http://www.clarkware.com/software/jdepend-${jdepend.version}.zip"/>
	<property name="jdepend.zip"			location="${tools.home}/jdepend-${jdepend.version}.zip" />

	<target	name="jdepend"
			description="Build dependency report"
		    depends="compile, jdepend.download, jdepend.verify"
			if="jdepend.available">
		<mkdir dir="${jdepend.report}"/>
		<jdepend
				format="xml"
				outputfile="${jdepend.report}/jdepend-report.xml" 
				fork="yes">
			<classespath>
			    <pathelement	location="${dest.main.classes.dir}" />
			</classespath>
			<classpath>
				<path	refid="classpath.runtime" />
				<fileset dir="${jdepend.home}" includes="**/*.jar"/>
			</classpath>
		</jdepend>
 		<xslt	in="${jdepend.report}/jdepend-report.xml"
				out="${jdepend.report}/jdepend-report.html"
				style="${jsword.home}/JSword.jdepend.xsl">
			<xmlcatalog refid="commonDTDs"/>
		</xslt>
	</target>

	<!-- JDepend visibility instructions -->
	<target name="jdepend.verify"
		    depends="jdepend.visible"
	        unless="jdepend.available">
		<echo>$${jdepend.available}=${jdepend.available}</echo>
		<echo>JDepend cannot run. jdepend-${jdepend.version}.jar is not visible to Ant.</echo>
		<echo>To make it visible you need to do one of two things depending</echo>
		<echo>on whether you are running ant in Eclipse or not.</echo>
		<echo>In Eclipse, add jdepend-*.jar to Preferences -> Ant -> Runtime -> Global Entries</echo>
		<echo>Otherwise, run the jdepend.antlibs task to copy jars to ANT_HOME/lib</echo>
	</target>

	<!-- Check to see if JDepend is visible to Ant. -->
	<target name="jdepend.visible">
	    <available property="jdepend.available"
	               classname="org.apache.tools.ant.taskdefs.optional.jdepend.JDependTask"/>
	</target>

	<!-- Download JDepend -->
	<target	name="jdepend.download"
			depends="jdepend.check"
			unless="jdepend.present">
		<mkdir	dir="${tools.home}" />
		<get	src="${jdepend.url}"	dest="${jdepend.zip}"	usetimestamp="true" />
		<unzip	src="${jdepend.zip}"	dest="${tools.home}" />
		<delete	file="${jdepend.zip}" />
	</target>

	<!-- See if JDepend is installed -->
	<target name="jdepend.check">
		<available file="${jdepend.home}"		type="dir"  property="jdepend.present" />
	</target>

	<!--=======================================================================
	== Use Javancss to do analyze Non Commenting Source Statements
	== These are properties related to Javancss.
	=========================================================================-->
	<property name="javancss.version"		value="32.53" />
	<property name="javancss.home"			location="${tools.home}/javancss-${javancss.version}" />
	<property name="javancss.report"		location="${report.dir}/javancss" />
	<property name="javancss.url"			value="http://www.kclee.de/clemens/java/javancss/javancss-${javancss.version}.zip"/>
	<property name="javancss.zip"			location="${tools.home}/javancss-${javancss.version}.zip" />

	<target name="javancss"
			depends="javancss.task">
		<mkdir dir="${javancss.report}"/>
		<javancss
				srcdir="${src.main.java.dir}"
				includes="**/*.java"
				generateReport="true"
				outputfile="${javancss.report}/javancss_metrics.xml"
				format="xml"/>
		<xslt	in="${javancss.report}/javancss_metrics.xml"
				out="${javancss.report}/index.html"
				style="${javancss.home}/xslt/javancss2html.xsl">
			<xmlcatalog refid="commonDTDs"/>
		</xslt>
	</target>

	<!-- Make JavaNCSS visible to Ant -->
	<target	name="javancss.task"
			depends="javancss.download">
		<taskdef name="javancss" classname="javancss.JavancssAntTask">
			<classpath>
				<fileset dir="${javancss.home}" includes="**/*.jar"/>
			</classpath>
		</taskdef>
	</target>

	<!-- Download JavaNCSS -->
	<target	name="javancss.download"
			depends="javancss.check"
			unless="javancss.present">
		<mkdir	dir="${tools.home}" />
		<get	src="${javancss.url}"	dest="${javancss.zip}"	usetimestamp="true" />
		<unzip	src="${javancss.zip}"	dest="${tools.home}" />
		<delete	file="${javancss.zip}" />
	</target>

	<!-- See if JavaNCSS is installed -->
	<target	name="javancss.check">
		<available file="${javancss.home}"		type="dir"  property="javancss.present" />
	</target>

	<!--=======================================================================
	== Use NSIS to create Windows installers
	== These are properties related to NSIS.
	=========================================================================-->
	<property name="nsis.version"		value="1.3" />
	<property name="nsis.home"			location="${tools.home}/nsis-${nsis.version}" />
	<property name="nsis.report"		location="${report.dir}/nsis" />
	<property name="nsis.url"			value="http://cloud.github.com/downloads/dreese/nsis-ant/nsisant-${nsis.version}.jar"/>

	<target	name="nsis.task"
			depends="nsis.download, nsis.verify">
		<path id="nsis.classpath">
			<fileset dir="${nsis.home}" includes="*.jar" />
		</path>
		<taskdef name="nsis" classpathref="nsis.classpath" classname="com.danielreese.nsisant.Task"/>
	</target>

	<!-- JDepend visibility instructions -->
	<target name="nsis.verify"
		    depends="nsis.visible"
	        unless="nsis.available">
		<echo>$${nsis.available}=${nsis.available}</echo>
		<echo>NSIS cannot run. nsis-${nsis.version}.jar is not visible to Ant.</echo>
		<echo>Also, makensis needs to be on your path</echo>
		<echo>To make it visible you need to do one of two things depending</echo>
		<echo>on whether you are running ant in Eclipse or not.</echo>
		<echo>In Eclipse, add nsis-*.jar to Preferences -> Ant -> Runtime -> Global Entries</echo>
		<echo>Otherwise, run the nsis.antlibs task to copy jars to ANT_HOME/lib</echo>
	</target>

	<!-- Check to see if JDepend is visible to Ant. -->
	<target name="nsis.visible">
	    <available property="nsis.available"
	               classname="com.danielreese.nsisant.Task"/>
	</target>

	<!-- Download NSIS -->
	<target	name="nsis.download"
			depends="nsis.check"
			unless="nsis.present">
		<mkdir	dir="${tools.home}" />
		<mkdir	dir="${nsis.home}" />
		<get	src="${nsis.url}"	dest="${nsis.home}"	usetimestamp="true" />
	</target>

	<!-- See if NSIS is installed -->
	<target	name="nsis.check">
		<available file="${nsis.home}/nsisant-${nsis.version}.jar"		type="file"  property="nsis.present" />
	</target>

	<!-- the only purpose of this is to provide a useful diagnostic. -->
	<target	name="nsis">
	    <echo>NSIS may fail if nsisant.jar is not visible to Ant and makensis is not in your path.
	To make the task visible you need to do one of two things depending
	on whether you are running ant in Eclipse or not.
	In Eclipse, add nsisant-*.jar to Preferences -> Ant -> Runtime -> Global Entries
	Otherwise, run the nsis.antlibs task to copy jars to ANT_HOME/lib</echo>
	</target>

	<!-- This does not need to be done in Eclipse. Add it to Ant preferences instead -->
	<target	name="nsis.antlibs"
			depends="nsis.download"
			description="Copy required nsis jars to ant/lib">
		<echo message="copy ${nsis.home}/nsisant-${nsis.version}.jar"/>
		<copy file="${nsis.home}/nsisant-${nsis.version}.jar" todir="${ant.home}/lib"/>
	</target>

	<!--=======================================================================
	== A keystore is needed to sign jars.
	== It does not need to be build very often and can be shared.
	=========================================================================-->
	<target	name="keygen"
			description="Generates a key for use in signing the JARs"
			depends="keygen.check"
			unless="keygen.uptodate">
		<echo message="Generating keystore for signing jars" />
		<genkey	alias="${keystore.alias}"
				storepass="${keystore.pswd}"
				keystore="${keystore.devfile}">
			<dname>
				<param name="CN" value="JSword Project" />
				<param name="OU" value="Test Builds" />
				<param name="O" value="Crosswire.org" />
				<param name="C" value="UK" />
			</dname>
		</genkey>
	</target>

	<!-- Check the keystore is there -->
	<target	name="keygen.check">
		<available property="keygen.uptodate" file="${keystore.devfile}" />
	</target>

	<!--=======================================================================
	== A handy target that can be useful for testing various things. Designed
	== to be hacked about before it is run. The main class is done as a property
	== so it can be overridden from outside if needed. Main classes that have
	== proved useful include:
	==   org.crosswire.bibledesktop.desktop.Desktop
	==   org.crosswire.jsword.book.ReadEverything
	==   abbot.editor.Costello
	==   org.acm.seguin.tools.install.PrettyPrinterConfigGUI
	=========================================================================-->
	<property name="exec.main" value="org.crosswire.bibledesktop.desktop.Desktop" />
	<target	name="exec"
			description="Test execution">
		<java classname="${exec.main}" fork="true">
			<assertions enablesystemassertions="true">
				<enable />
			</assertions>
			<jvmarg value="-Xmx512m" />
			<classpath refid="classpath.runtime" />
		</java>
	</target>

</project>
